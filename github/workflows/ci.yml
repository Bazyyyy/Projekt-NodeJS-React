name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:

  test:
    name: Test Automation
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Run Vitest
        run: npm run test -- --coverage

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: üîê Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/todo-frontend:latest

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend/todo-backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/todo-backend:latest
  stability-watch:
    name: Stability Check
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Compose
        run: docker compose version || sudo apt-get update && sudo apt-get install docker-compose -y
      
      - name: Start containers for testing
        run: |
          docker compose -f docker-compose.yml up -d
          sleep 5

      - name: Check backend health
        run: curl --fail http://localhost:5000/api || (echo "Backend nicht erreichbar" && exit 1)

      - name: Check frontend health
        run: curl --fail http://localhost:5173 || (echo "Frontend nicht erreichbar" && exit 1)

      - name: Check database file exists
        runs: |
          if [ -f logs/server.log]; then
            if grep -i error logs/server.log; then
              echo "Fehler in server.log gefunden" && exit 1
            else
              echo "Logs Ok"
            file
          else
            echo "Kein Log vorhanden - √úberspringe..."
          fi

      - name: Cleanup
        run: docker compose -f docker-compose.yml down --remove-orphans
